/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package cantseechess;

import cantseechess.storage.HashmapStorage;
import com.google.gson.Gson;
import net.dv8tion.jda.api.JDA;
import net.dv8tion.jda.api.JDABuilder;
import net.dv8tion.jda.api.interactions.commands.OptionType;
import net.dv8tion.jda.api.interactions.commands.build.CommandData;

import java.io.*;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static BotConfig getConfig() throws IOException {
        var gson = new Gson();
        try {
            return gson.fromJson(new FileReader("config.json"), BotConfig.class);
        } catch (FileNotFoundException e) {
            System.out.println(gson.toJson(new BotConfig()));
            var writer = new FileWriter("config.json");
            gson.toJson(new BotConfig(), writer);
            writer.flush();
        }
        return null;
    }

    public static String getStockfish(String specifiedPath) {
        var sf = new File(specifiedPath);
        if (!sf.exists()) {
            // FIXME: maybe we shouldn't package stockfish
            return App.class.getResource("/stockfish.exe").getPath();
        }
        return sf.getAbsolutePath();
    }

    public static void main(String[] args) throws Exception {
        BotConfig config = getConfig();
        if (config == null) {
            System.out.println("no token file!");
            return;
        }
        if (config.token == null || config.token.isBlank()) {
            System.out.println("no token in token file");
            return;
        }
        var ratings = new HashmapStorage();
        JDA jda = JDABuilder.createDefault(config.token)
                .addEventListeners(new BotListener(ratings, getStockfish(config.stockfishPath), config.emojiGuild))
                .build();
        jda.awaitReady();

        jda.updateCommands().addCommands(new CommandData("challenge", "Challenge a user to a game of chess")
                        .addOption(OptionType.USER, "user", "The user you'd like to challenge", true)
                        .addOption(OptionType.STRING, "color", "The color you'd like to play as (white or black), leave blank for random", false)
                        .addOption(OptionType.STRING, "time", "The time control you'd like to play. Include m for minutes and s for seconds (ex. 3m 30s)", false)
                        .addOption(OptionType.INTEGER, "increment", "The time increment in seconds to gain each round, leave blank for none", false),
                new CommandData("accept", "Accept a pending challenge"),
                new CommandData("decline", "Decline a pending challenge"),
                new CommandData("stats", "Check a user's rating and rating deviation")
                        .addOption(OptionType.USER, "user", "The user whose stats to view, leave blank to view your own stats", false),
                new CommandData("import", "Import a chess game from a PGN")
                        .addOption(OptionType.STRING, "pgn", "Import a chess game from a PGN", true),
                new CommandData("resign", "Resign from your current game"))
                .queue();

        System.out.println(new App().getGreeting());
    }

    private static class BotConfig {
        String token = "token";
        String emojiGuild = "how";
        String stockfishPath = "";
    }
}
