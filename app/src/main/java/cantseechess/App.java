/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package cantseechess;

import cantseechess.chess.BoardGenerator;
import cantseechess.storage.HashmapStorage;
import net.dv8tion.jda.api.JDA;
import net.dv8tion.jda.api.JDABuilder;
import net.dv8tion.jda.api.entities.Emote;
import net.dv8tion.jda.api.interactions.commands.OptionType;
import net.dv8tion.jda.api.interactions.commands.build.CommandData;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.NoSuchFileException;
import java.nio.file.Paths;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static String getToken() {
        var tokenPath = Paths.get("token");
        try {
            return Files.readString(tokenPath, StandardCharsets.UTF_8);
        } catch (NoSuchFileException e) {
            try {
                Files.createFile(tokenPath);
            } catch (IOException ioException) {
                ioException.printStackTrace();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }

    public static void main(String[] args) throws Exception {
        String token = getToken();
        if (token == null || token.isBlank()) {
            System.out.println("no token in token file");
            return;
        }
        var ratings = new HashmapStorage();
        JDA jda = JDABuilder.createDefault(token)
                .addEventListeners(new BotListener(ratings))
                .build();
        jda.awaitReady();


        jda.updateCommands().addCommands(new CommandData("challenge", "Challenge a user to a game of chess")
                        .addOption(OptionType.USER, "user", "The user you'd like to challenge", true)
                        .addOption(OptionType.STRING, "color", "The color you'd like to play as (white or black), leave blank for random", false)
                        .addOption(OptionType.STRING, "time", "The time control you'd like to play. Include m for minutes and s for seconds (ex. 3m 30s)", false)
                        .addOption(OptionType.INTEGER, "increment", "The time increment in seconds to gain each round, leave blank for none", false),
                new CommandData("accept", "Accept a pending challenge"),
                new CommandData("decline", "Decline a pending challenge"),
                new CommandData("stats", "Check a user's rating and rating deviation")
                        .addOption(OptionType.USER, "user", "The user whose stats to view, leave blank to view your own stats", false),
                new CommandData("import", "Import a chess game from a PGN")
                        .addOption(OptionType.STRING, "pgn", "Import a chess game from a PGN", true),
                new CommandData("resign", "Resign from your current game"))
                .queue();
        var emoteGuild = jda.getGuildById(864636208147988510L);
        if (emoteGuild != null) {
            BoardGenerator.boardEmotes = emoteGuild.getEmotes().toArray(Emote[]::new);
        } else {
            System.out.println("could not get emote guild");
        }

        System.out.println(new App().getGreeting());
    }
}
